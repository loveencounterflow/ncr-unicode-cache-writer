{
  "version": 3,
  "file": "reader.js",
  "sourceRoot": "..",
  "sources": [
    "src/reader.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\n# njs_util                  = require 'util'\nPATH                      = require 'path'\nFS                        = require 'fs'\n#...........................................................................................................\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'NCR-UNICODE-CACHE-WRITER/READER'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nD                         = require 'pipedreams'\n{ $, $async, }            = D\nrequire 'pipedreams/lib/plugin-tsv'\n# require 'pipedreams/lib/plugin-tabulate'\n#...........................................................................................................\n{ step }                  = require 'coffeenode-suspend'\n\n\n#===========================================================================================================\n# PATTERNS\n#-----------------------------------------------------------------------------------------------------------\nucd_range_pattern     = ///\n  ^                           # Start of line\n  ( [ 0-9 a-f ]{ 4, 6 } )     # ... hexadecimal number with 4 to 6 digits\n  \\.\\.                        # ... range marker: two full stops\n  ( [ 0-9 a-f ]{ 4, 6 })      # ... hexadecimal number with 4 to 6 digits\n  ;                           # ... semicolon\n  [ \\x20 \\t ]+                # ... mandatory whitespace\n  ( .+ )                      # ... anything (text content)\n  $                           # ... end of line\n  ///i\n\n#-----------------------------------------------------------------------------------------------------------\nextras_range_pattern = ///\n  ^                           # Start of line\n  \\^                          # ... a caret\n  ( [ 0-9 a-f ]{ 1, 6 } )     # ... hexadecimal number with 1 to 6 digits\n  (?:                         # (start optional)\n    \\.\\.                        # ... range marker: two full stops\n    ( [ 0-9 a-f ]{ 1, 6 } )     # ... hexadecimal number with 1 to 6 digits\n    )?                          # (end optional)\n  $                           # ... end of line\n  ///i\n\n\n#===========================================================================================================\n# HELPERS\n#-----------------------------------------------------------------------------------------------------------\nresolve         = ( path ) -> PATH.resolve __dirname,                 '..', path\nresolve_ucd     = ( path ) -> resolve PATH.join 'Unicode-UCD-9.0.0',        path\nresolve_extras  = ( path ) -> resolve PATH.join 'extras',                   path\n\n#-----------------------------------------------------------------------------------------------------------\ninterval_from_block_name = ( S, rsg, block_name ) ->\n  unless ( R = S.interval_by_names[ block_name ] )?\n    throw new Error \"RSG #{rsg}: unknown Unicode block #{rpr block_name}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\ninterval_from_rsg = ( S, rsg ) ->\n  unless ( R = S.interval_by_rsgs[ rsg ] )?\n    debug '4020', S.interval_by_rsgs\n    throw new Error \"unknown RSG #{rpr rsg}\"\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nadd_comments_to_intervals = ( S ) ->\n  hex = ( n ) -> 'U+' + n.toString 16\n  for interval in S.intervals\n    { lo, hi, }             = interval\n    comment                 = interval[ 'comment' ] ? ''\n    interval[ 'comment' ]   = \"(#{hex lo}..#{hex hi}) #{comment}\".trim()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\ninterval_from_range_match = ( S, match ) ->\n  [ _, lo_hex, hi_hex, ]  = match\n  lo                      = parseInt lo_hex, 16\n  hi                      = if ( hi_hex? and hi_hex.length > 0 ) then ( parseInt hi_hex, 16 ) else lo\n  return { lo, hi, }\n\n#-----------------------------------------------------------------------------------------------------------\nappend_tag = ( S, interval, tag ) ->\n  if ( target = interval[ 'tag' ] )?\n    if CND.isa_list target\n      target.push tag\n    else\n      interval[ 'tag' ] = [ target, tag, ]\n  else\n    interval[ 'tag' ] = [ tag, ]\n  return null\n\n\n#===========================================================================================================\n# HELPER TRANSFORMS\n#-----------------------------------------------------------------------------------------------------------\n@$show                  = ( S ) => $ ( x ) => urge JSON.stringify x\n@$split_multi_blank_sv  = ( S ) -> D.$split_tsv splitter: /\\t{1,}|[\\x20\\t]{2,}/g\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@read_block_names = ( S, handler ) ->\n  path                = resolve_ucd 'Blocks.txt'\n  input               = D.new_stream { path, }\n  type                = 'block'\n  S.interval_by_names = {}\n  #.........................................................................................................\n  input\n    .pipe D.$split_tsv()\n    # .pipe D.$sample 1 / 10, seed: 872\n    .pipe @$block_interval_from_line S\n    .pipe $ ( interval ) =>\n      { \"#{type}\": name, }        = interval\n      S.interval_by_names[ name ] = interval\n      S.intervals.push interval\n    # .pipe @$show S\n    .pipe $ 'finish', handler\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$block_interval_from_line = ( S ) =>\n  type    = 'block'\n  return $ ( [ line, ], send ) =>\n    match = line.match ucd_range_pattern\n    return send.error new Error \"not a valid line: #{rpr line}\" unless match?\n    [ _, lo_hex, hi_hex, short_name, ] = match\n    lo    = parseInt lo_hex, 16\n    hi    = parseInt hi_hex, 16\n    name  = \"#{type}:#{short_name}\"\n    send { lo, hi, name, type: type, \"#{type}\": short_name, }\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@read_assigned_codepoints = ( S, handler ) ->\n  path                = resolve_ucd 'UnicodeData.txt'\n  input               = D.new_stream { path, }\n  #.........................................................................................................\n  input\n    .pipe D.$split_tsv splitter: ';'\n    .pipe $ ( fields,             send ) => send [ fields[ 0 ], fields[ 1 ], ]\n    .pipe $ ( [ cid_hex, name, ], send ) => send [ ( parseInt cid_hex, 16 ), name, ]\n    .pipe @$collect_intervals S\n    # .pipe $ ( { lo, hi, } ) => urge ( lo.toString 16 ), ( hi.toString 16 )\n    .pipe $ ( { lo, hi, }, send ) => send { lo, hi, tag: '-unassigned assigned', }\n    .pipe $ 'start', ( send ) => send { lo: 0x000000, hi: 0x10ffff, tag: 'unassigned', }\n    .pipe $ ( interval ) => S.intervals.push interval\n    # .pipe $ 'finish', handler\n    .pipe $ 'finish', =>\n      handler()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_intervals = ( S ) ->\n  last_interval_start = null\n  last_cid          = null\n  last_lo             = null\n  last_hi             = null\n  return $ 'null', ( entry, send ) =>\n    #.......................................................................................................\n    if entry?\n      [ cid, name, ] = entry\n      #.....................................................................................................\n      if ( name isnt '<control>' ) and ( name.startsWith '<' )\n        ### Explicit ranges are marked by `<XXXXX, First>` for the first and `<XXXXX, Last>` for the last\n        CID; these can be dealt with in a simplified manner: ###\n        #...................................................................................................\n        if name.endsWith 'First>'\n          if last_interval_start?\n            return send.error new Error \"unexpected start of range #{rpr name}\"\n          last_interval_start = cid\n        #...................................................................................................\n        else if name.endsWith 'Last>'\n          unless last_interval_start?\n            return send.error new Error \"unexpected end of range #{rpr name}\"\n          lo                  = last_interval_start\n          last_interval_start = null\n          hi                  = cid\n          send { lo, hi, }\n        #...................................................................................................\n        else\n          ### Any entry whose name starts with a `<` (less-than sign) should either have the symbolic\n          name of '<control>' or else demarcate a range boundary; everything else is an error: ###\n          return send.error new Error \"unexpected name #{rpr name}\"\n      #.....................................................................................................\n      else\n        ### Single point entries ###\n        ### TAINT Code duplication with `INTERVALSKIPLIST.intervals_from_points` ###\n        #...................................................................................................\n        unless last_lo?\n          last_lo     = cid\n          last_hi     = cid\n          last_cid    = cid\n          return null\n        #...................................................................................................\n        if cid is last_cid + 1\n          last_hi     = cid\n          last_cid    = cid\n          return null\n        #...................................................................................................\n        send { lo: last_lo, hi: last_hi, }\n        last_lo     = cid\n        last_hi     = cid\n        last_cid    = cid\n    #.......................................................................................................\n    else\n      send { lo: last_lo, hi: last_hi, } if last_lo? and last_hi?\n      send null\n    #.......................................................................................................\n    return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@read_planes_and_areas = ( S, handler ) ->\n  path                = resolve_extras 'planes-and-areas.txt'\n  input               = D.new_stream { path, }\n  #.........................................................................................................\n  input\n    .pipe @$split_multi_blank_sv  S\n    .pipe @$read_target_interval  S\n    .pipe $ ( [ { lo, hi, }, type, short_name, ] ) =>\n      name      = \"#{type}:#{short_name}\"\n      interval  = { lo, hi, name, type: type, \"#{type}\": short_name, }\n      S.intervals.push interval\n    .pipe $ 'finish', handler\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$read_target_interval = ( S ) =>\n  return $ ( [ range, type, name, ], send ) =>\n    unless ( match = range.match extras_range_pattern )?\n      return send.error new Error \"illegal line format; expected range, found #{rpr range}\"\n    interval = interval_from_range_match S, match\n    send [ interval, type, name, ]\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@read_rsgs_and_block_names = ( S, handler ) ->\n  path                = resolve_extras 'rsgs.txt'\n  input               = D.new_stream { path, }\n  S.interval_by_rsgs  = {}\n  #.........................................................................................................\n  input\n    .pipe @$split_multi_blank_sv S\n    # .pipe D.$sample 1 / 40, seed: 872\n    .pipe $ ( [ rsg, block_name, ] ) =>\n      interval                  = interval_from_block_name S, rsg, block_name\n      interval[ 'rsg' ]         = rsg\n      S.interval_by_rsgs[ rsg ] = interval\n    .pipe $ 'finish', handler\n  #.........................................................................................................\n  return null\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@read_tags = ( S, handler ) ->\n  path                = resolve_extras 'tags.txt'\n  input               = D.new_stream { path, }\n  #.........................................................................................................\n  input\n    .pipe @$split_multi_blank_sv  S\n    .pipe @$read_rsg_or_range     S\n    .pipe $ 'finish', handler\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$read_rsg_or_range = ( S ) =>\n  if S.recycle_intervals\n    ### When recycling intervals, tags for those intervals that are identified symbolically are added to the\n    existing interval objects. When not recycling intervals, a new interval object is created for each line\n    in the tagging source. This may influence how tags are resolved by `INTERVALSKIPLIST.aggregate`. ###\n    return $ ( [ rsg_or_range, tag, ], send ) =>\n      if ( match = rsg_or_range.match extras_range_pattern )?\n        interval          = interval_from_range_match S, match\n        interval[ 'tag' ] = tag\n        S.intervals.push interval\n      else\n        interval = interval_from_rsg S, rsg_or_range\n        append_tag S, interval, tag\n      #.....................................................................................................\n      return null\n  #.........................................................................................................\n  return $ ( [ rsg_or_range, tag, ], send ) =>\n    if ( match = rsg_or_range.match extras_range_pattern )?\n      interval          = interval_from_range_match S, match\n      interval[ 'tag' ] = tag\n    else\n      { lo, hi, rsg, block: name, } = interval_from_rsg S, rsg_or_range\n      comment                       = \"References RSG #{rsg} (#{name}).\"\n      interval                      = { lo, hi, comment, tag, }\n      # interval                      = { lo, hi, tag, }\n    S.intervals.push interval\n    #.....................................................................................................\n    return null\n\n\n#===========================================================================================================\n# MAIN\n#-----------------------------------------------------------------------------------------------------------\n@read = ( handler ) ->\n  self = @\n  #.........................................................................................................\n  intervals = []\n  S         = { intervals, }\n  #.........................................................................................................\n  step ( resume ) ->\n    yield self.read_assigned_codepoints   S, resume\n    yield self.read_planes_and_areas      S, resume\n    yield self.read_block_names           S, resume\n    yield self.read_rsgs_and_block_names  S, resume\n    yield self.read_tags                  S, resume\n    add_comments_to_intervals S\n    handler null, S\n  #.........................................................................................................\n  return null\n\n\n"
  ]
}
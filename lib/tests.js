// Generated by CoffeeScript 1.10.0
(function() {
  var CND, CW, ISL, alert, badge, debug, echo, help, hex, include, info, log, rpr, s, step, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'NCR-UNICODE-CACHE-WRITER/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  step = require('coffeenode-suspend').step;

  test = require('guy-test');


  /* short for 'cache writer': */

  CW = require('./main');

  ISL = require('interskiplist');

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function(handler) {
    if (handler == null) {
      handler = null;
    }
    return test(this, {
      'timeout': 30000
    });
  };

  hex = function(n) {
    return '0x' + n.toString(16);
  };

  s = function(x) {
    return JSON.stringify(x);
  };

  this["demo"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        (yield CW.main(resume));
        help('ok');
        return done();
      };
    })(this));
    return null;
  };

  this["superficial API test"] = function(T, done) {
    return step((function(_this) {
      return function*(resume) {
        var S, i, interval, intervals, isl_1, isl_2, len;
        S = (yield CW.read(resume));
        intervals = (yield CW.read_intervals(resume));
        T.eq(Object.keys(S), ['intervals', 'interval_by_names', 'interval_by_rsgs']);
        T.eq(S.intervals, intervals);
        T.ok(S.intervals !== intervals);
        isl_1 = (yield CW.read_isl(resume));
        isl_2 = ISL["new"]();
        for (i = 0, len = intervals.length; i < len; i++) {
          interval = intervals[i];
          ISL.add(isl_2, interval);
        }
        delete isl_1['%self'];
        delete isl_2['%self'];
        T.eq(isl_1, isl_2);
        help('ok');
        return done();
      };
    })(this));
  };

  this["test Unicode ISL against select codepoints"] = function(T, done) {
    var probes_and_matchers, reducers;
    probes_and_matchers = [
      [
        "a", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "ASCII & Latin-1 Compatibility Area",
          "block": "Basic Latin",
          "rsg": "u-latn"
        }
      ], [
        "ä", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "ASCII & Latin-1 Compatibility Area",
          "block": "Latin-1 Supplement",
          "rsg": "u-latn-1"
        }
      ], [
        "ɐ", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "General Scripts Area",
          "block": "IPA Extensions",
          "rsg": "u-ipa-x"
        }
      ], [
        "ա", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "General Scripts Area",
          "block": "Armenian"
        }
      ], [
        "三", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "CJKV Unified Ideographs Area",
          "block": "CJK Unified Ideographs",
          "rsg": "u-cjk",
          "tag": ["cjk", "ideograph"]
        }
      ], [
        "ゆ", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "CJK Miscellaneous Area",
          "block": "Hiragana",
          "rsg": "u-cjk-hira",
          "tag": ["cjk", "japanese", "kana", "hiragana"]
        }
      ], [
        "㈪", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "CJK Miscellaneous Area",
          "block": "Enclosed CJK Letters and Months",
          "rsg": "u-cjk-enclett",
          "tag": ["cjk"]
        }
      ], [
        "《", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "CJK Miscellaneous Area",
          "block": "CJK Symbols and Punctuation",
          "rsg": "u-cjk-sym",
          "tag": ["cjk", "punctuation"]
        }
      ], [
        "》", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "CJK Miscellaneous Area",
          "block": "CJK Symbols and Punctuation",
          "rsg": "u-cjk-sym",
          "tag": ["cjk", "punctuation"]
        }
      ], [
        "𫠠", {
          "plane": "Supplementary Ideographic Plane (SIP)",
          "block": "CJK Unified Ideographs Extension E",
          "rsg": "u-cjk-xe",
          "tag": ["cjk", "ideograph"]
        }
      ], [
        "﹄", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "Compatibility and Specials Area",
          "block": "CJK Compatibility Forms",
          "rsg": "u-cjk-cmpf",
          "tag": ["cjk", "vertical"]
        }
      ], [
        "﹅", {
          "plane": "Basic Multilingual Plane (BMP)",
          "area": "Compatibility and Specials Area",
          "block": "CJK Compatibility Forms",
          "rsg": "u-cjk-cmpf",
          "tag": ["cjk"]
        }
      ], [
        "𝍖", {
          "plane": "Supplementary Multilingual Plane (SMP)",
          "area": "Symbols Area",
          "block": "Tai Xuan Jing Symbols",
          "rsg": "u-txj-sym",
          "tag": ["cjk", "yijing", "taixuanjing", "tetragram"]
        }
      ], [
        "𝍗", {
          "plane": "Supplementary Multilingual Plane (SMP)",
          "area": "Symbols Area",
          "block": "Tai Xuan Jing Symbols",
          "rsg": "u-txj-sym",
          "tag": ["reserved"]
        }
      ]
    ];
    reducers = {
      name: 'skip',
      type: 'skip',
      comment: 'skip'
    };
    CW.read_isl((function(_this) {
      return function(error, isl) {
        var i, len, matcher, probe, ref;
        if (error != null) {
          throw error;
        }
        for (i = 0, len = probes_and_matchers.length; i < len; i++) {
          ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
          echo(s([probe, ISL.aggregate(isl, probe, reducers)]));
        }
        return done();
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    include = ["test Unicode ISL against select codepoints"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map

// Generated by CoffeeScript 1.10.0
(function() {
  var CND, CW, alert, badge, debug, echo, help, hex, include, info, log, rpr, s, step, suspend, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'NCR-UNICODE-CACHE-WRITER/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  suspend = require('coffeenode-suspend');

  step = suspend.step;

  test = require('guy-test');


  /* short for 'cache writer': */

  CW = require('./main');

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function(handler) {
    if (handler == null) {
      handler = null;
    }
    return test(this, {
      'timeout': 3000
    });
  };

  hex = function(n) {
    return '0x' + n.toString(16);
  };

  s = function(x) {
    return JSON.stringify(x);
  };

  this["demo"] = function(T, done) {
    step((function(_this) {
      return function*(resume) {
        (yield CW.main(resume));
        return done();
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    include = [];
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map

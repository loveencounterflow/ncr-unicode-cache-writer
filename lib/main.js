// Generated by CoffeeScript 2.3.1
(function() {
  //###########################################################################################################
  // njs_util                  = require 'util'
  var CND, FS, ISL, PATH, alert, badge, debug, echo, help, info, log, rpr, step, urge, warn, whisper;

  PATH = require('path');

  FS = require('fs');

  //...........................................................................................................
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NCR-UNICODE-CACHE-WRITER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  // #...........................................................................................................
  // D                         = require 'pipedreams'
  // { $, $async, }            = D
  // require 'pipedreams/lib/plugin-tsv'
  // # require 'pipedreams/lib/plugin-tabulate'
  //...........................................................................................................
  ({step} = require('coffeenode-suspend'));

  //...........................................................................................................
  ISL = require('interskiplist');

  this.READER = require('./reader');

  //-----------------------------------------------------------------------------------------------------------
  this.read = function(handler) {
    return this.READER.read((error, S) => {
      if (error != null) {
        return handler(error);
      }
      return handler(null, S);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_intervals = function(handler) {
    return this.read((error, S) => {
      if (error != null) {
        return handler(error);
      }
      return handler(null, S.intervals);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.read_isl = function(handler) {
    return this.read_intervals((error, intervals) => {
      var i, interval, isl, len;
      if (error != null) {
        return handler(error);
      }
      isl = ISL.new();
      for (i = 0, len = intervals.length; i < len; i++) {
        interval = intervals[i];
        ISL.add(isl, interval);
      }
      return handler(null, isl);
    });
  };

  //===========================================================================================================
  // WRITE CACHES
  //-----------------------------------------------------------------------------------------------------------
  this.write = function(S, handler = null) {
    this.read_intervals((error, intervals) => {
      var i, idx, ref;
      if (error != null) {
        return handler(error);
      }
      // json = JSON.stringify intervals, null, '  '
      // echo json
      echo('[');
      for (idx = i = 0, ref = intervals.length - 2; i < ref; idx = i += +1) {
        echo((JSON.stringify(intervals[idx])) + ',');
      }
      echo(JSON.stringify(intervals[intervals.length - 1]));
      echo(']');
      if (handler != null) {
        return handler();
      }
    });
    //.........................................................................................................
    return null;
  };

  // write_to_file = no
  // help "#{S.intervals.length} intervals"
  // #.........................................................................................................
  // if write_to_file
  //   path = '/tmp/u-intervals.json'
  //   FS.writeFile path, json, =>
  //     help "written to #{path}"
  //     handler()
  // else

  //###########################################################################################################
  if (module.parent == null) {
    this.write();
  }

}).call(this);

//# sourceMappingURL=main.js.map

// Generated by CoffeeScript 1.12.4
(function() {
  var CND, FS, ISL, PATH, alert, badge, debug, echo, help, info, log, rpr, step, urge, warn, whisper;

  PATH = require('path');

  FS = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'NCR-UNICODE-CACHE-WRITER';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  step = require('coffeenode-suspend').step;

  ISL = require('interskiplist');

  this.READER = require('./reader');

  this.read = function(handler) {
    return this.READER.read((function(_this) {
      return function(error, S) {
        if (error != null) {
          return handler(error);
        }
        return handler(null, S);
      };
    })(this));
  };

  this.read_intervals = function(handler) {
    return this.read((function(_this) {
      return function(error, S) {
        if (error != null) {
          return handler(error);
        }
        return handler(null, S.intervals);
      };
    })(this));
  };

  this.read_isl = function(handler) {
    return this.read_intervals((function(_this) {
      return function(error, intervals) {
        var i, interval, isl, len;
        if (error != null) {
          return handler(error);
        }
        isl = ISL["new"]();
        for (i = 0, len = intervals.length; i < len; i++) {
          interval = intervals[i];
          ISL.add(isl, interval);
        }
        return handler(null, isl);
      };
    })(this));
  };

  this.write = function(S, handler) {
    if (handler == null) {
      handler = null;
    }
    this.read_intervals((function(_this) {
      return function(error, intervals) {
        var json;
        if (error != null) {
          return handler(error);
        }
        json = JSON.stringify(intervals, null, '  ');
        echo(json);
        if (handler != null) {
          return handler();
        }
      };
    })(this));
    return null;
  };

  if (module.parent == null) {
    this.write();
  }

}).call(this);

//# sourceMappingURL=main.js.map

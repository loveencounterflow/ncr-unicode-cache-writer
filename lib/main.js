// Generated by CoffeeScript 1.10.0
(function() {
  var CND, alert, badge, debug, echo, help, info, log, njs_fs, njs_path, njs_util, read_ucd_sources, rpr, urge, warn, whisper;

  njs_util = require('util');

  njs_path = require('path');

  njs_fs = require('fs');

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'scratch';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  read_ucd_sources = function() {
    var $, $async, $split_fields, D, PATH, done, input, path;
    D = require('pipedreams');
    $ = D.$, $async = D.$async;
    require('pipedreams/lib/plugin-tsv');
    require('pipedreams/lib/plugin-tabulate');
    PATH = require('path');
    path = PATH.resolve(__dirname, '../../Downloads/Unicode-9.0.0-UCD/Blocks.txt');
    input = D.new_stream({
      path: path
    });
    done = function() {
      return urge('ok');
    };
    $split_fields = (function(_this) {
      return function() {
        var pattern;
        pattern = /^([0-9a-f]{4,6})\.\.([0-9a-f]{4,6});\s+(.+)$/i;
        return $(function(arg, send) {
          var _, hi, hi_hex, line, lo, lo_hex, match, name;
          line = arg[0];
          match = line.match(pattern);
          if (match == null) {
            return send.error(new Error("not a valid line: " + (rpr(line))));
          }
          _ = match[0], lo_hex = match[1], hi_hex = match[2], name = match[3];
          lo = parseInt(lo_hex, 16);
          hi = parseInt(hi_hex, 16);
          return send({
            lo: lo,
            hi: hi,
            name: name
          });
        });
      };
    })(this);
    input.pipe(D.$split_tsv()).pipe($split_fields()).pipe($((function(_this) {
      return function(interval) {
        return urge(JSON.stringify(interval));
      };
    })(this))).pipe($('finish', done));
    return null;
  };

}).call(this);

//# sourceMappingURL=main.js.map
